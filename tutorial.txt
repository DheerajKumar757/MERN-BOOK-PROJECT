

==============Tutorail 1======================
CORS (Cross-Origin Resource Sharing) is a mechanism that allows a server to specify which origins (domains) are permitted to access its resources. It is a security feature implemented by web browsers to prevent unauthorized access to resources from different origins.

In your code, the [`cors`](command:_github.copilot.openSymbolFromReferences?%5B%22%22%2C%5B%7B%22uri%22%3A%7B%22scheme%22%3A%22file%22%2C%22authority%22%3A%22%22%2C%22path%22%3A%22%2Fhome%2Fdheeraj757%2FDheeraj%2FProgramms%2Fweb_dev%2FMERN-BOOK-PROJECT%2Fmern-server%2Findex.js%22%2C%22query%22%3A%22%22%2C%22fragment%22%3A%22%22%7D%2C%22pos%22%3A%7B%22line%22%3A3%2C%22character%22%3A6%7D%7D%5D%2C%22e70862f3-7ccc-4b89-8328-a388489206b9%22%5D "Go to definition") middleware is being used to enable CORS for your Express server. By default, browsers block requests made from one origin (e.g., `http://example.com`) to another (e.g., `http://api.example.com`) unless the server explicitly allows it. The [`cors`](command:_github.copilot.openSymbolFromReferences?%5B%22%22%2C%5B%7B%22uri%22%3A%7B%22scheme%22%3A%22file%22%2C%22authority%22%3A%22%22%2C%22path%22%3A%22%2Fhome%2Fdheeraj757%2FDheeraj%2FProgramms%2Fweb_dev%2FMERN-BOOK-PROJECT%2Fmern-server%2Findex.js%22%2C%22query%22%3A%22%22%2C%22fragment%22%3A%22%22%7D%2C%22pos%22%3A%7B%22line%22%3A3%2C%22character%22%3A6%7D%7D%5D%2C%22e70862f3-7ccc-4b89-8328-a388489206b9%22%5D "Go to definition") package simplifies the process of configuring these permissions.

### Example Use Case:
If your frontend (React) is hosted on `http://localhost:3000` and your backend (Express) is hosted on `http://localhost:5000`, the browser will block requests from the frontend to the backend unless CORS is enabled.

### How It Works in Your Code:
```javascript
app.use(cors());
```
This line enables CORS with default settings, allowing all origins to access your server. You can customize it to restrict access to specific origins or HTTP methods if needed.


The line app.use(express.json()); is a middleware function in an Express.js application. It is used to parse incoming JSON payloads in HTTP request bodies.

Explanation:
express.json() is a built-in middleware in Express (since version 4.16.0).
It parses incoming requests with a Content-Type of application/json and makes the parsed data available in req.body.
Use Case:
When a client sends a JSON payload in the body of a POST, PUT, or PATCH request, this middleware processes the JSON data and converts it into a JavaScript object. Without this middleware, req.body would be undefined.

Example:
If a client sends:

req.body will contain:

Why It's Important:
Without express.json(), you would need to manually parse the JSON payload, which can be cumbersome. This middleware simplifies handling JSON data in your application.


mongodb+srv://<db_username>:<db_password>@cluster0.uvafpxf.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
The MongoDB URI you provided does not specify a database name. When a database name is not explicitly mentioned in the URI, MongoDB will use the **default database**, which is `test`.
If you want to specify a database name, you can include it in the URI like this:
```properties
mongodb+srv://<db_username>:<db_password>@cluster0.uvafpxf.mongodb.net/your_database_name?retryWrites=true&w=majority&appName=Cluster0
```
Replace `your_database_name` with the name of the database you want to use.

To start mongodb compass :
mongodb-compass